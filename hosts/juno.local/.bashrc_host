# SGY
eval $(minikube docker-env)
alias jira='open https://project.schoologize.com/browse/$(git rev-parse --abbrev-ref HEAD 2>/dev/null)'
alias cdsgy="cd $HOME/envy/systems/schoology/lib/sgy-shared/src/sgy-core/schoology"

function awsc {
    export AWS_PROFILE=$1
}

function cg {
    type=$1
    shift
    scope=$1
    shift
    git commit -m "$type($scope): $@ $(git rev-parse --abbrev-ref HEAD)"
}

function cgn {
    type=$1
    shift
    scope=$1
    shift
    git commit -nm "$type($scope): $@ $(git rev-parse --abbrev-ref HEAD)"
}

kllogs() {
    pods=($(kubectl get pods | grep "${1:-sgy-web}" | awk '{print $1}'))
    echo Found $#pods pod\(s\): $pods
    kubectl exec "${pods[0]}" -- bash -c 'tail -n 50 -f /var/log/schoology/watchdog.log'
}

mysql-client-path() {
    echo "/usr/local/opt/mysql/bin"
}
# Method that returns current Port for Mysql DB inside of Envy
envy-mysql-port() {
    local port="$(kubectl get service | grep percona | awk '{print $5}' | cut -c 6-10)"
    echo $port;
}

envy-db-dump() {
    local dump="$(mysql-client-path)/mysqldump"
    local port="$(envy-mysql-port)"
    local snapshot_dir="$HOME/Desktop"
    local dump_filename="${1:-mysqldump_dev}"
    mkdir -p $snapshot_dir
    $dump  --column-statistics=0 -h localenv.ninja -u schoologydev --password="schoologydev" --port $port \
        --databases schoology_common_assessment_submissions schoology_common_assessments \
        --set-gtid-purged=OFF  > $snapshot_dir/$dump_filename.sql && gzip -f $snapshot_dir/$dump_filename.sql
}

es-reindex() {
    pods=( $(kubectl get pods | grep "sgy-web" | awk '{print $1}') )
    echo Reindexing search for "${pods}"
    kubectl exec "${pods}" -- bash -c "cd /var/www/html/schoology/docroot/scripts/search && php-cgi es-reindex.php"
}

envy_mysql_port() {
    local port="$(kubectl get service | grep percona | awk '{print $5}' | cut -c 6-10)"
    echo $port;
}

export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"

# Scale deployment or statefulset up or down
# Example usage: k-scale cassandra 0
k-scale() {
  ss=( $(kubectl get statefulset | grep "$1" | awk '{print $1}') )
  for dep in "${ss[@]}"
  do
    kubectl scale statefulset "$dep" --replicas="$2"
  done;
  deployments=( $(kubectl get deployments | grep "$1" | awk '{print $1}') )
  for dep in "${deployments[@]}"
  do
    kubectl scale deployment "$dep" --replicas="$2"
  done;
}

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[ -f /private/tmp/assessment-submission-service/node_modules/serverless-step-functions/node_modules/tabtab/.completions/serverless.bash ] && . /private/tmp/assessment-submission-service/node_modules/serverless-step-functions/node_modules/tabtab/.completions/serverless.bash
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[ -f /private/tmp/assessment-submission-service/node_modules/serverless-step-functions/node_modules/tabtab/.completions/sls.bash ] && . /private/tmp/assessment-submission-service/node_modules/serverless-step-functions/node_modules/tabtab/.completions/sls.bash
# tabtab source for slss package
# uninstall by removing these lines or running `tabtab uninstall slss`
[ -f /private/tmp/assessment-submission-service/node_modules/serverless-step-functions/node_modules/tabtab/.completions/slss.bash ] && . /private/tmp/assessment-submission-service/node_modules/serverless-step-functions/node_modules/tabtab/.completions/slss.bash

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
